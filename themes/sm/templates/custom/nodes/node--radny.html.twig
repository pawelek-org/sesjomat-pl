{# {{ content }} #}
{% if node.field_plec.0.value == 'k' %}{% set plec = 'k' %}{% elseif node.field_plec.0.value == 'm' %}{% set plec = 'm' %}{% endif %}

<div class="divider"></div>
<p>{% if plec == 'k' %}Pani{% elseif plec == 'm' %}Pan{% endif %} {{ node.title.0.value }} jest {% if plec == 'k' %}radną{% elseif plec == 'm' %}radnym{% endif %} w sołectwach {{ node.field_solectwo.0.value }}.</p>
<p>Adres e-mail oraz numer telefonu do {% if plec == 'k' %}pani radnej{% elseif plec == 'm' %}pana radnego{% endif %} znajduje się na stronie <a href="{{ node.field_href_source.0.value }}" title="Dane kontaktowe {{ node.title.0.value }}" rel="nofollow" target="_blank">Urzędu Gminy Dopiewo</a>.

{# GŁOSOWANIE #}
<h5 class="s-subtitle"><i class="icon icon-people"></i> Ilość oddanych głosów w trakcie sesji</h5>
{{ drupal_view('radni_glosowanie', 'block_2', node.id) }}

{# OŚWIADCZENIA MAJĄTKOWE #}
<h5 class="s-subtitle"><i class="icon icon-link"></i> Oświadczenia majątkowe</h5>
<p>Osoby sprawujące funkcje publiczne (w tym radni zasiadający w radach gmin) zgodnie z przepisami mają obowiązek składać oświadczenia majątkowe. Dostęp do tych oświadczeń jest możliwy poprzez <a href="https://bip.dopiewo.pl/?c=214" title="Oświadczenia majątkowe w Gminie Dopiewo" rel="nofollow" target="_blank">Biuletyn Informacji Publicznej</a>.</p>
{{ content.field_bip_oswiadczenia_majatkowe }}

{# INTERPELACJE #}
<h5 class="s-subtitle"><i class="icon icon-copy"></i> Złożone interpelacje</h5>
{% set ile_interpelacji = drupal_view_result('interpelacje', 'block_1', node.id)|length %}
{% if ile_interpelacji > 0 %}
  {{ drupal_view('interpelacje', 'block_1', node.id) }}
{% else %}
  <p>Jak dotąd {% if plec == 'k' %}radna{% elseif plec == 'm' %}radny{% endif %} {{ node.title.0.value }} nie {% if plec == 'k' %}złożyła{% elseif plec == 'm' %}złożył{% endif %} interpelacji.</p>
{% endif %}

{# STOPKA #}
<div class="accordion">
  <input type="checkbox" id="accordion-2" name="accordion-checkbox" hidden>
  <label class="accordion-header" for="accordion-2">
    <i class="icon icon-arrow-right mr-1"></i>
    Historia zmian
  </label>
  <div class="accordion-body">
    <div class="container">
      <div class="columns">
        <div class="column col-4 col-sm-12"><span class="text-gray">Data wprowadzenia<br>{{ node.created.value|date('Y-m-d') }}</span></div>
        <div class="column col-4 col-sm-12"><span class="text-gray">Data ostatniej aktualizacji<br>{{ node.published.value|date('Y-m-d') }}</span></div>
        <div class="column col-4 col-sm-12"><span class="text-gray">Odnośnik do źródła<br><a href="{{ node.field_href_source.0.value }}" rel="nofollow" target="_blank" title="Odnośnik do źródła">Kliknij</a></span></div>
      </div>
    </div>
  </div>
</div>



{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}